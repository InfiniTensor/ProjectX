cmake_minimum_required(VERSION 3.12 FATAL_ERROR)
project(refactor_graph VERSION 0.0.0 LANGUAGES CXX)
message(STATUS "Project " ${PROJECT_NAME} " version " ${PROJECT_VERSION})

option(ABSL_PROPAGATE_CXX_STD "Abseil need this option" ON)
option(USE_CUDA "Support Nvidia GPU" OFF)
option(USE_KUNLUN "Support Baidu Kunlunxin" OFF)
option(USE_BANG "Support Hanwuji MLU" OFF)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

if(USE_CUDA)
    add_compile_definitions(USE_CUDA)
    enable_language(CUDA)
    set(CMAKE_CUDA_HOST_COMPILER ${CMAKE_CXX_COMPILER})
    if(NOT DEFINED CMAKE_CUDA_ARCHITECTURES)
        set(CMAKE_CUDA_ARCHITECTURES 80)
    endif()
    if(NOT DEFINED CMAKE_CUDA_STANDARD)
        set(CMAKE_CUDA_STANDARD 17)
        set(CMAKE_CUDA_STANDARD_REQUIRED ON)
        set(CMAKE_CUDA_CXX_EXTENSIONS OFF)
    endif()
    message(STATUS "CMAKE_CUDA_HOST_COMPILER set to " ${CMAKE_CUDA_HOST_COMPILER})
    message(STATUS "CMAKE_CUDA_ARCHITECTURES set to " ${CMAKE_CUDA_ARCHITECTURES})
    message(STATUS "CUDA_PATH set to " ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES})
    add_compile_definitions(CUDA_INCLUDE_PATH="${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES}")
endif()

if(USE_KUNLUN)
    add_compile_definitions(USE_KUNLUN)
    if (DEFINED KUNLUN_HOME)
        set(KUNLUN_HOME ${KUNLUN_HOME} CACHE STRING "KUNLUN_HOME directory for Kunlun development")
    elseif(DEFINED ENV{KUNLUN_HOME})
        set(KUNLUN_HOME $ENV{KUNLUN_HOME} CACHE STRING "KUNLUN_HOME directory for Kunlun development")
    else()
        message(FATAL_ERROR "KUNLUN_HOME is not defined from cmake or env")
    endif()
    message(STATUS "KUNLUN_HOME: ${KUNLUN_HOME}")
endif()

if (USE_BANG)
    add_compile_definitions(USE_BANG)
    include_directories(src/kernels/mlu/include)
    
    # Neuware Evironment
    if ((NOT DEFINED NEUWARE_HOME) AND (NOT DEFINED ENV{NEUWARE_HOME}))
    message(FATAL_ERROR "NEUWARE_HOME is not defined from cmake or env")
    elseif (DEFINED NEUWARE_HOME)
    set(NEUWARE_HOME ${NEUWARE_HOME} CACHE STRING "NEUWARE_HOME directory for Cambricon Neuware development")
    else()
    set(NEUWARE_HOME $ENV{NEUWARE_HOME} CACHE STRING "NEUWARE_HOME directory for Cambricon Neuware development")
    endif()
    message(STATUS "NEUWARE_HOME: ${NEUWARE_HOME}")
    
    # cnrt cndrv cnnl
    include_directories("${NEUWARE_HOME}/include")
    find_library(CAMBRICON_CNNL libcnnl.so "${NEUWARE_HOME}/lib64")
    find_library(CAMBRICON_CNRT libcnrt.so "${NEUWARE_HOME}/lib64")
    find_library(CAMBRICON_CNDRV libcndrv.so "${NEUWARE_HOME}/lib64")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -lstdc++ -Wall")
  
    if ((NOT DEFINED TARGET_CPU_ARCH) AND (NOT DEFINED ENV{TARGET_CPU_ARCH}))
      execute_process(COMMAND uname -m OUTPUT_VARIABLE _uname_m OUTPUT_STRIP_TRAILING_WHITESPACE)
      set(TARGET_CPU_ARCH "${_uname_m}" CACHE STRING "Target CPU ARCH")
    elseif(DEFINED TARGET_CPU_ARCH)
      set(TARGET_CPU_ARCH ${TARGET_CPU_ARCH} CACHE STRING "Target CPU ARCH")
    else()
      set(TARGET_CPU_ARCH $ENV{TARGET_CPU_ARCH} CACHE STRING "Target CPU ARCH")
    endif()
    message(STATUS "TARGET_CPU_ARCH: ${TARGET_CPU_ARCH}")
endif()

add_compile_options(-march=native) # this will cause error in some machine
add_compile_options(-mtune=native)
add_compile_options(-Wall)

add_subdirectory(3rd-party/backward-cpp)

include_directories(3rd-party/fmt/include)
add_subdirectory(3rd-party/fmt)

include_directories(3rd-party/googletest/googletest/include)
add_subdirectory(3rd-party/googletest)

include_directories(3rd-party/fmtlog)
add_definitions(-D FMTLOG_HEADER_ONLY)

include_directories(3rd-party/abseil-cpp)
add_subdirectory(3rd-party/abseil-cpp)

include_directories(3rd-party/result)

enable_testing()

add_subdirectory(src/00common)
add_subdirectory(src/01graph_topo)
add_subdirectory(src/02hardware)
add_subdirectory(src/03runtime)
add_subdirectory(src/04kernel)
add_subdirectory(src/05computation)
add_subdirectory(src/06frontend)
add_subdirectory(src/07onnx)
add_subdirectory(src/08communication)
add_subdirectory(src/09python_ffi)
